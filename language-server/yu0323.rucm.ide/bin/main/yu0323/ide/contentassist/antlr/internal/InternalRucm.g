/*
 * generated by Xtext 2.19.0
 */
grammar InternalRucm;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package yu0323.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package yu0323.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import yu0323.services.RucmGrammarAccess;

}
@parser::members {
	private RucmGrammarAccess grammarAccess;

	public void setGrammarAccess(RucmGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleUCModel
entryRuleUCModel
:
{ before(grammarAccess.getUCModelRule()); }
	 ruleUCModel
{ after(grammarAccess.getUCModelRule()); } 
	 EOF 
;

// Rule UCModel
ruleUCModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUCModelAccess().getGroup()); }
		(rule__UCModel__Group__0)
		{ after(grammarAccess.getUCModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleActor
entryRuleActor
:
{ before(grammarAccess.getActorRule()); }
	 ruleActor
{ after(grammarAccess.getActorRule()); } 
	 EOF 
;

// Rule Actor
ruleActor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActorAccess().getGroup()); }
		(rule__Actor__Group__0)
		{ after(grammarAccess.getActorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUseCase
entryRuleUseCase
:
{ before(grammarAccess.getUseCaseRule()); }
	 ruleUseCase
{ after(grammarAccess.getUseCaseRule()); } 
	 EOF 
;

// Rule UseCase
ruleUseCase 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUseCaseAccess().getGroup()); }
		(rule__UseCase__Group__0)
		{ after(grammarAccess.getUseCaseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelationship
entryRuleRelationship
:
{ before(grammarAccess.getRelationshipRule()); }
	 ruleRelationship
{ after(grammarAccess.getRelationshipRule()); } 
	 EOF 
;

// Rule Relationship
ruleRelationship 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelationshipAccess().getGroup()); }
		(rule__Relationship__Group__0)
		{ after(grammarAccess.getRelationshipAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UCModel__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUCModelAccess().getActorAssignment_2_0()); }
		(rule__UCModel__ActorAssignment_2_0)
		{ after(grammarAccess.getUCModelAccess().getActorAssignment_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getUCModelAccess().getUsecaseAssignment_2_1()); }
		(rule__UCModel__UsecaseAssignment_2_1)
		{ after(grammarAccess.getUCModelAccess().getUsecaseAssignment_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UCModel__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UCModel__Group__0__Impl
	rule__UCModel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UCModel__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUCModelAccess().getUcmodelKeyword_0()); }
	'ucmodel'
	{ after(grammarAccess.getUCModelAccess().getUcmodelKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UCModel__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UCModel__Group__1__Impl
	rule__UCModel__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UCModel__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUCModelAccess().getNameAssignment_1()); }
	(rule__UCModel__NameAssignment_1)
	{ after(grammarAccess.getUCModelAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UCModel__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UCModel__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UCModel__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUCModelAccess().getAlternatives_2()); }
	(rule__UCModel__Alternatives_2)*
	{ after(grammarAccess.getUCModelAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Actor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actor__Group__0__Impl
	rule__Actor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActorAccess().getActorKeyword_0()); }
	'actor'
	{ after(grammarAccess.getActorAccess().getActorKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actor__Group__1__Impl
	rule__Actor__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActorAccess().getNameAssignment_1()); }
	(rule__Actor__NameAssignment_1)
	{ after(grammarAccess.getActorAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actor__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActorAccess().getRelationshipAssignment_2()); }
	(rule__Actor__RelationshipAssignment_2)*
	{ after(grammarAccess.getActorAccess().getRelationshipAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UseCase__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UseCase__Group__0__Impl
	rule__UseCase__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UseCase__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUseCaseAccess().getUsecaseKeyword_0()); }
	'usecase'
	{ after(grammarAccess.getUseCaseAccess().getUsecaseKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UseCase__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UseCase__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UseCase__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUseCaseAccess().getNameAssignment_1()); }
	(rule__UseCase__NameAssignment_1)
	{ after(grammarAccess.getUseCaseAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Relationship__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Relationship__Group__0__Impl
	rule__Relationship__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Relationship__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipAccess().getActorAssignment_0()); }
	(rule__Relationship__ActorAssignment_0)
	{ after(grammarAccess.getRelationshipAccess().getActorAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relationship__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Relationship__Group__1__Impl
	rule__Relationship__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Relationship__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipAccess().getEqualsSignGreaterThanSignKeyword_1()); }
	'=>'
	{ after(grammarAccess.getRelationshipAccess().getEqualsSignGreaterThanSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relationship__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Relationship__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Relationship__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationshipAccess().getUsecaseAssignment_2()); }
	(rule__Relationship__UsecaseAssignment_2)
	{ after(grammarAccess.getRelationshipAccess().getUsecaseAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UCModel__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUCModelAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getUCModelAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UCModel__ActorAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUCModelAccess().getActorActorParserRuleCall_2_0_0()); }
		ruleActor
		{ after(grammarAccess.getUCModelAccess().getActorActorParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UCModel__UsecaseAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUCModelAccess().getUsecaseUseCaseParserRuleCall_2_1_0()); }
		ruleUseCase
		{ after(grammarAccess.getUCModelAccess().getUsecaseUseCaseParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActorAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getActorAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__RelationshipAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActorAccess().getRelationshipRelationshipParserRuleCall_2_0()); }
		ruleRelationship
		{ after(grammarAccess.getActorAccess().getRelationshipRelationshipParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UseCase__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUseCaseAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getUseCaseAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relationship__ActorAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationshipAccess().getActorActorCrossReference_0_0()); }
		(
			{ before(grammarAccess.getRelationshipAccess().getActorActorIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getRelationshipAccess().getActorActorIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getRelationshipAccess().getActorActorCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relationship__UsecaseAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationshipAccess().getUsecaseUseCaseCrossReference_2_0()); }
		(
			{ before(grammarAccess.getRelationshipAccess().getUsecaseUseCaseIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getRelationshipAccess().getUsecaseUseCaseIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getRelationshipAccess().getUsecaseUseCaseCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;

/*
 * generated by Xtext 2.19.0
 */
package yu0323.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import yu0323.rucm.Actor;
import yu0323.rucm.Relationship;
import yu0323.rucm.RucmPackage;
import yu0323.rucm.UCModel;
import yu0323.rucm.UseCase;
import yu0323.services.RucmGrammarAccess;

@SuppressWarnings("all")
public class RucmSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RucmGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == RucmPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RucmPackage.ACTOR:
				sequence_Actor(context, (Actor) semanticObject); 
				return; 
			case RucmPackage.RELATIONSHIP:
				sequence_Relationship(context, (Relationship) semanticObject); 
				return; 
			case RucmPackage.UC_MODEL:
				sequence_UCModel(context, (UCModel) semanticObject); 
				return; 
			case RucmPackage.USE_CASE:
				sequence_UseCase(context, (UseCase) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Actor returns Actor
	 *
	 * Constraint:
	 *     (name=ID relationship+=Relationship*)
	 */
	protected void sequence_Actor(ISerializationContext context, Actor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Relationship returns Relationship
	 *
	 * Constraint:
	 *     (actor=[Actor|ID] usecase=[UseCase|ID])
	 */
	protected void sequence_Relationship(ISerializationContext context, Relationship semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RucmPackage.Literals.RELATIONSHIP__ACTOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RucmPackage.Literals.RELATIONSHIP__ACTOR));
			if (transientValues.isValueTransient(semanticObject, RucmPackage.Literals.RELATIONSHIP__USECASE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RucmPackage.Literals.RELATIONSHIP__USECASE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRelationshipAccess().getActorActorIDTerminalRuleCall_0_0_1(), semanticObject.eGet(RucmPackage.Literals.RELATIONSHIP__ACTOR, false));
		feeder.accept(grammarAccess.getRelationshipAccess().getUsecaseUseCaseIDTerminalRuleCall_2_0_1(), semanticObject.eGet(RucmPackage.Literals.RELATIONSHIP__USECASE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     UCModel returns UCModel
	 *
	 * Constraint:
	 *     (name=ID (actor+=Actor | usecase+=UseCase)*)
	 */
	protected void sequence_UCModel(ISerializationContext context, UCModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UseCase returns UseCase
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_UseCase(ISerializationContext context, UseCase semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RucmPackage.Literals.USE_CASE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RucmPackage.Literals.USE_CASE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUseCaseAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}

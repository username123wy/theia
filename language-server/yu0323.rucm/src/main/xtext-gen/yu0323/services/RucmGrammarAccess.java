/*
 * generated by Xtext 2.19.0
 */
package yu0323.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RucmGrammarAccess extends AbstractGrammarElementFinder {
	
	public class UCModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yu0323.Rucm.UCModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUcmodelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cActorAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cActorActorParserRuleCall_2_0_0 = (RuleCall)cActorAssignment_2_0.eContents().get(0);
		private final Assignment cUsecaseAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cUsecaseUseCaseParserRuleCall_2_1_0 = (RuleCall)cUsecaseAssignment_2_1.eContents().get(0);
		
		//UCModel:
		//	'ucmodel' name=ID (actor+=Actor | usecase+=UseCase)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'ucmodel' name=ID (actor+=Actor | usecase+=UseCase)*
		public Group getGroup() { return cGroup; }
		
		//'ucmodel'
		public Keyword getUcmodelKeyword_0() { return cUcmodelKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(actor+=Actor | usecase+=UseCase)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//actor+=Actor
		public Assignment getActorAssignment_2_0() { return cActorAssignment_2_0; }
		
		//Actor
		public RuleCall getActorActorParserRuleCall_2_0_0() { return cActorActorParserRuleCall_2_0_0; }
		
		//usecase+=UseCase
		public Assignment getUsecaseAssignment_2_1() { return cUsecaseAssignment_2_1; }
		
		//UseCase
		public RuleCall getUsecaseUseCaseParserRuleCall_2_1_0() { return cUsecaseUseCaseParserRuleCall_2_1_0; }
	}
	public class ActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yu0323.Rucm.Actor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cRelationshipAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRelationshipRelationshipParserRuleCall_2_0 = (RuleCall)cRelationshipAssignment_2.eContents().get(0);
		
		//Actor:
		//	'actor' name=ID
		//	relationship+=Relationship*;
		@Override public ParserRule getRule() { return rule; }
		
		//'actor' name=ID relationship+=Relationship*
		public Group getGroup() { return cGroup; }
		
		//'actor'
		public Keyword getActorKeyword_0() { return cActorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//relationship+=Relationship*
		public Assignment getRelationshipAssignment_2() { return cRelationshipAssignment_2; }
		
		//Relationship
		public RuleCall getRelationshipRelationshipParserRuleCall_2_0() { return cRelationshipRelationshipParserRuleCall_2_0; }
	}
	public class UseCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yu0323.Rucm.UseCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUsecaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//UseCase:
		//	'usecase' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'usecase' name=ID
		public Group getGroup() { return cGroup; }
		
		//'usecase'
		public Keyword getUsecaseKeyword_0() { return cUsecaseKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class RelationshipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yu0323.Rucm.Relationship");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cActorActorCrossReference_0_0 = (CrossReference)cActorAssignment_0.eContents().get(0);
		private final RuleCall cActorActorIDTerminalRuleCall_0_0_1 = (RuleCall)cActorActorCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUsecaseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cUsecaseUseCaseCrossReference_2_0 = (CrossReference)cUsecaseAssignment_2.eContents().get(0);
		private final RuleCall cUsecaseUseCaseIDTerminalRuleCall_2_0_1 = (RuleCall)cUsecaseUseCaseCrossReference_2_0.eContents().get(1);
		
		//Relationship:
		//	actor=[Actor] '=>' usecase=[UseCase];
		@Override public ParserRule getRule() { return rule; }
		
		//actor=[Actor] '=>' usecase=[UseCase]
		public Group getGroup() { return cGroup; }
		
		//actor=[Actor]
		public Assignment getActorAssignment_0() { return cActorAssignment_0; }
		
		//[Actor]
		public CrossReference getActorActorCrossReference_0_0() { return cActorActorCrossReference_0_0; }
		
		//ID
		public RuleCall getActorActorIDTerminalRuleCall_0_0_1() { return cActorActorIDTerminalRuleCall_0_0_1; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }
		
		//usecase=[UseCase]
		public Assignment getUsecaseAssignment_2() { return cUsecaseAssignment_2; }
		
		//[UseCase]
		public CrossReference getUsecaseUseCaseCrossReference_2_0() { return cUsecaseUseCaseCrossReference_2_0; }
		
		//ID
		public RuleCall getUsecaseUseCaseIDTerminalRuleCall_2_0_1() { return cUsecaseUseCaseIDTerminalRuleCall_2_0_1; }
	}
	
	
	private final UCModelElements pUCModel;
	private final ActorElements pActor;
	private final UseCaseElements pUseCase;
	private final RelationshipElements pRelationship;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RucmGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pUCModel = new UCModelElements();
		this.pActor = new ActorElements();
		this.pUseCase = new UseCaseElements();
		this.pRelationship = new RelationshipElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("yu0323.Rucm".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//UCModel:
	//	'ucmodel' name=ID (actor+=Actor | usecase+=UseCase)*;
	public UCModelElements getUCModelAccess() {
		return pUCModel;
	}
	
	public ParserRule getUCModelRule() {
		return getUCModelAccess().getRule();
	}
	
	//Actor:
	//	'actor' name=ID
	//	relationship+=Relationship*;
	public ActorElements getActorAccess() {
		return pActor;
	}
	
	public ParserRule getActorRule() {
		return getActorAccess().getRule();
	}
	
	//UseCase:
	//	'usecase' name=ID;
	public UseCaseElements getUseCaseAccess() {
		return pUseCase;
	}
	
	public ParserRule getUseCaseRule() {
		return getUseCaseAccess().getRule();
	}
	
	//Relationship:
	//	actor=[Actor] '=>' usecase=[UseCase];
	public RelationshipElements getRelationshipAccess() {
		return pRelationship;
	}
	
	public ParserRule getRelationshipRule() {
		return getRelationshipAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

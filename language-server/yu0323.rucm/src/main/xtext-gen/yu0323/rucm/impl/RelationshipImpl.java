/**
 * generated by Xtext 2.19.0
 */
package yu0323.rucm.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import yu0323.rucm.Actor;
import yu0323.rucm.Relationship;
import yu0323.rucm.RucmPackage;
import yu0323.rucm.UseCase;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Relationship</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link yu0323.rucm.impl.RelationshipImpl#getActor <em>Actor</em>}</li>
 *   <li>{@link yu0323.rucm.impl.RelationshipImpl#getUsecase <em>Usecase</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RelationshipImpl extends MinimalEObjectImpl.Container implements Relationship
{
  /**
   * The cached value of the '{@link #getActor() <em>Actor</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActor()
   * @generated
   * @ordered
   */
  protected Actor actor;

  /**
   * The cached value of the '{@link #getUsecase() <em>Usecase</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUsecase()
   * @generated
   * @ordered
   */
  protected UseCase usecase;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RelationshipImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RucmPackage.Literals.RELATIONSHIP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Actor getActor()
  {
    if (actor != null && actor.eIsProxy())
    {
      InternalEObject oldActor = (InternalEObject)actor;
      actor = (Actor)eResolveProxy(oldActor);
      if (actor != oldActor)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, RucmPackage.RELATIONSHIP__ACTOR, oldActor, actor));
      }
    }
    return actor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Actor basicGetActor()
  {
    return actor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setActor(Actor newActor)
  {
    Actor oldActor = actor;
    actor = newActor;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RucmPackage.RELATIONSHIP__ACTOR, oldActor, actor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UseCase getUsecase()
  {
    if (usecase != null && usecase.eIsProxy())
    {
      InternalEObject oldUsecase = (InternalEObject)usecase;
      usecase = (UseCase)eResolveProxy(oldUsecase);
      if (usecase != oldUsecase)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, RucmPackage.RELATIONSHIP__USECASE, oldUsecase, usecase));
      }
    }
    return usecase;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UseCase basicGetUsecase()
  {
    return usecase;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setUsecase(UseCase newUsecase)
  {
    UseCase oldUsecase = usecase;
    usecase = newUsecase;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RucmPackage.RELATIONSHIP__USECASE, oldUsecase, usecase));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RucmPackage.RELATIONSHIP__ACTOR:
        if (resolve) return getActor();
        return basicGetActor();
      case RucmPackage.RELATIONSHIP__USECASE:
        if (resolve) return getUsecase();
        return basicGetUsecase();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RucmPackage.RELATIONSHIP__ACTOR:
        setActor((Actor)newValue);
        return;
      case RucmPackage.RELATIONSHIP__USECASE:
        setUsecase((UseCase)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RucmPackage.RELATIONSHIP__ACTOR:
        setActor((Actor)null);
        return;
      case RucmPackage.RELATIONSHIP__USECASE:
        setUsecase((UseCase)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RucmPackage.RELATIONSHIP__ACTOR:
        return actor != null;
      case RucmPackage.RELATIONSHIP__USECASE:
        return usecase != null;
    }
    return super.eIsSet(featureID);
  }

} //RelationshipImpl
